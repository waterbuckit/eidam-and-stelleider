---
import eiders from '../images/eiders-in-autumn.png';
import eye from '../images/eye.png';
import heart from '../images/heart.png';
---

<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<link rel="manifest" href="/site.webmanifest">
		<meta name="generator" content={Astro.generator} />
		<title>Eidam and Stelleider</title>
	</head>

	<body
		class="bg-gradient-to-t from-orange-500 to-orange-200 h-screen relative"
		>
		<div class="grid place-items-center content-center absolute inset-0 max-h-screen px-6 py-2">
			<h1 class="sr-only">
				Eidam and Stelleider on eiderdook hill
			</h1>
			<div class="h-full relative">
				<div class="absolute inset-0 overflow-y-hidden">
					<img class="eye absolute w-[2%] shadow rounded-full top-[47.5%] left-[49%]" src={eye}>
					<img class="eye absolute w-[2%] shadow rounded-full top-[44%] left-[57%]" src={eye}>
					<img id="stella-heart" style={{ 
						opacity: 0,
						transitionProperty: 'opacity, transform',
						transitionTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1)',	
					}} class="absolute w-4 duration-500 ease-in-out" src={heart}>
					<img id="adam-heart" style={{ 
						opacity: 0,
						transitionProperty: 'opacity, transform',
						transitionTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1)',	
					}} class="absolute w-4 duration-500 ease-in-out" src={heart}>
					<button id="stella" style={{
						top: '42%',
						left: '56%',
						width: '15%',
						height: '12%'
					}} type="button" class="opacity-0 absolute" />
					<button id="adam" 
						style={{
							top: '45.5%',
							left: '37%',
							width: '18%',
							height: '12%'
						}}
						type="button" class="opacity-0 absolute" />
					<div id="leaves" class="w-full h-full overflow-x-hidden pointer-events-none">
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i>
						<i></i> 
					</div>
				</div>
				<img id="eiders" class="rounded-xl shadow-xl max-w-screen max-h-screen" src={eiders}>
			</div>
		</div>
	
		<script>
			const leavesStyling = document.createElement('style');
			leavesStyling.innerText = `
			/* leaf animations */

			#leaves {position:relative;top:-50px;width:100%;text-align: left;}

			#leaves i {
			    display: inline-block;
			    width: 200px;
			    height: 150px;
			    background: linear-gradient(to bottom right, #309900, #005600);
			    transform: skew(20deg);
			    border-radius: 5% 40% 70%;
			    box-shadow: inset 0px 0px 1px #222;
			    border: 1px solid #333;
			    z-index: 1;
			    -webkit-animation: falling 5s 0s infinite;
			}

			#leaves i:nth-of-type(2n) { -webkit-animation: falling2 5s 0s infinite; }
			#leaves i:nth-of-type(3n) { -webkit-animation: falling3 5s 0s infinite; }

			#leaves i:before {
			  position: absolute;
			  content: '';
			  top: 117px;
			  right: 9px;
			  height: 27px;
			  width: 32px;
			  transform: rotate(49deg);
			  border-radius: 0% 15% 15% 0%;
			  border-top: 1px solid #222;
			  border-bottom: 1px solid #222;
			  border-left: 0px solid #222;
			  border-right: 1px solid #222;
			  background: linear-gradient(to right, rgba(0,100,0,1), #FF6347);
			  z-index: 1;
			}

			#leaves i:after {
			  content: '';
			  height: 125px;
			  width: 10px;
			  background: linear-gradient(to right, rgba(0,0,0,.15), rgba(0,0,0,0));
			  display: block;
			  transform: rotate(125deg);
			  position: absolute;
			  left: 85px;
			  border-radius:50%;
			}


			#leaves i:nth-of-type(n)    { height:23px; width:30px; }
			#leaves i:nth-of-type(n):before { width:7px; height:5px; top:17px; right:1px; }
			#leaves i:nth-of-type(n):after { width:2px; height:17px; left: 12px; top:0px; }

			#leaves i:nth-of-type(2n+1)    { height:11px; width:16px; }
			#leaves i:nth-of-type(2n+1):before { width:4px; height:3px; top:7px; right:0px; }
			#leaves i:nth-of-type(2n+1):after { width:2px; height:6px; left: 5px; top:1px; }

			#leaves i:nth-of-type(3n+2)  { height:17px; width:23px; }
			#leaves i:nth-of-type(3n+2):before  { height:4px; width:4px; top:12px; right:1px; }
			#leaves i:nth-of-type(3n+2):after  { height:10px; width:2px; top:1px; left:8px; }

			#leaves i:nth-of-type(n)   { -webkit-animation-delay: 1.9s;}
			#leaves i:nth-of-type(2n)  { -webkit-animation-delay: 3.9s;}
			#leaves i:nth-of-type(3n)  { -webkit-animation-delay: 2.3s;}
			#leaves i:nth-of-type(4n)  { -webkit-animation-delay: 4.4s;}
			#leaves i:nth-of-type(5n)  { -webkit-animation-delay: 5s;  }
			#leaves i:nth-of-type(6n)  { -webkit-animation-delay: 3.5s;}
			#leaves i:nth-of-type(7n)  { -webkit-animation-delay: 2.8s;}
			#leaves i:nth-of-type(8n)  { -webkit-animation-delay: 1.5s;}
			#leaves i:nth-of-type(9n)  { -webkit-animation-delay: 3.3s;}
			#leaves i:nth-of-type(10n) { -webkit-animation-delay: 2.5s;}
			#leaves i:nth-of-type(11n) { -webkit-animation-delay: 1.2s;}
			#leaves i:nth-of-type(12n) { -webkit-animation-delay: 4.1s;}
			#leaves i:nth-of-type(13n) { -webkit-animation-delay: 1s;  }
			#leaves i:nth-of-type(14n) { -webkit-animation-delay: 4.7s;}
			#leaves i:nth-of-type(15n) { -webkit-animation-delay: 3s;  }

			#leaves i:nth-of-type(n)    { background: linear-gradient(to bottom right, #FF6347, #005600); }
			#leaves i:nth-of-type(2n+2)  { background: linear-gradient(to bottom right, #FFD700, #2b5600); }
			#leaves i:nth-of-type(4n+1)  { background: linear-gradient(to bottom right, #FFA500, #564500); }

			#leaves i:nth-of-type(n)    { opacity: .7;}
			#leaves i:nth-of-type(3n+1)  { opacity: .5;}
			#leaves i:nth-of-type(3n+2)  { opacity: .3;}

			#leaves i:nth-of-type(n)    {transform: rotate(180deg);}


			#leaves i:nth-of-type(n) { -webkit-animation-timing-function:ease-in-out;}

			@-webkit-keyframes falling {
			
			    0% {
			        -webkit-transform:
			            translate3d(300,0,0)
			            rotate(0deg);
			    }
				
			    100% {
			        -webkit-transform:
			            translate3d(-350px,700px,0)
			            rotate(90deg);
			        opacity: 0;
			    }
			}

			@-webkit-keyframes falling3 {
			     0% {
			        -webkit-transform:
			            translate3d(0,0,0)
			            rotate(20deg);
			    }
				
			    100% {
			        -webkit-transform:
			            translate3d(230px,640px,0)
			            rotate(70deg);
			        opacity: 0;
			    }
			}

			@-webkit-keyframes falling2 {
			     0% {
			        -webkit-transform:
			            translate3d(0,0,0)
			            rotate(90deg);
			    }
				
			    100% {
			        -webkit-transform:
			            translate3d(400px,680px,0)
			            rotate(0deg);
			        opacity: 0;
			    }
			}
			`;

			document.body.appendChild(leavesStyling)

			const moveEyes = (evt: MouseEvent) => {
				const eyes = document.querySelectorAll<HTMLElement>('.eye');

				eyes.forEach((eye) => {

					let x = eye.getBoundingClientRect().left + eye.clientWidth / 2;
       		let y = eye.getBoundingClientRect().top + eye.clientHeight / 2;

       		let radian = Math.atan2(evt.pageX - x, evt.pageY - y);
       		let theta = radian * (180 / Math.PI) * -1 + 270;
					eye.style.transform = `rotate(${theta - 180}deg)`;
				})
			}

			document.addEventListener('mousemove', moveEyes);
			document.addEventListener('click', moveEyes);

			const adamHeart = document.getElementById('adam-heart')
			const stellaHeart = document.getElementById('stella-heart')
			const adam = document.getElementById('adam')
			const stella = document.getElementById('stella')

			const randomInterval = (min: number, max: number) => 
				Math.floor(Math.random() * (max - min + 1) + min)

			const handleHeart = (button: HTMLElement | null, heart: HTMLElement | null) => {
				if(button) {
					let timeout: number | undefined;
					button.addEventListener('click', () => {
						if(timeout) {
							clearTimeout(timeout)
						}
						if(heart) {
							heart.style.opacity = '0';
							heart.style.transform = 'none';

							const leftOffset = randomInterval(5, 15)
							const topOffset = randomInterval(1, -3)

							setTimeout(() => {
								heart.style.top = parseInt(button.style.top.split('%')[0]) + topOffset + '%'
								heart.style.left = parseInt(button.style.left.split('%')[0]) + leftOffset + '%'
								heart.style.opacity = '1';
								heart.style.transform = 'translateY(-50%)'
							}, 500)

							timeout = setTimeout(() => {
								heart.style.opacity = '0';
							}, 2000)
						}
					});
				}
			}

			handleHeart(adam, adamHeart);
			handleHeart(stella, stellaHeart);
		</script>
	</body>
</html>
